#include <iostream>
using namespace std;


bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

int precedence(char c) {
    if (c == '+' || c == '-')
        return 1;
    else if (c == '*' || c == '/')
        return 2;
    return 0;
}


string infixToPostfix(string infix) {
    int stackSize = infix.size();
    char stack[stackSize];
    int top = -1;

    string postfix = "";

    for (int i = 0; i < infix.length(); i++) {
        char currentChar = infix[i];

     
        if (isalnum(currentChar))
            postfix += currentChar;
        else if (currentChar == '(')
            stack[++top] = currentChar;
        else if (currentChar == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix += stack[top];
                top--;
            }
            top--; 
        }
        else if (isOperator(currentChar)) {
            while (top != -1 && stack[top] != '(' && precedence(stack[top]) >= precedence(currentChar)) {
                postfix += stack[top];
                top--;
            }
            stack[++top] = currentChar;
        }
    }

    
    while (top != -1) {
        postfix += stack[top];
        top--;
    }

    return postfix;
}

int main() {
    string infixExpression;
    cout << "Enter the infix expression: ";
    
    cin>>infixExpression;

    string postfixExpression = infixToPostfix(infixExpression);

    cout << "Postfix expression: " << postfixExpression << endl;

    return 0;
}
